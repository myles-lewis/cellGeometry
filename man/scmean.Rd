% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scmean.R
\name{scmean}
\alias{scmean}
\title{Single-cell mean log gene expression across cell types}
\usage{
scmean(
  x,
  celltype,
  logfirst = TRUE,
  big = NULL,
  verbose = TRUE,
  sliceSize = 5000L,
  cores = 1L
)
}
\arguments{
\item{x}{matrix or sparse matrix of raw counts with genes in rows and cells
in columns.}

\item{celltype}{a vector of cell subclasses or types whose length matches the
number of columns in \code{x}. It is coerced to a factor. \code{NA} are tolerated and
the matching columns in \code{x} are skipped.}

\item{logfirst}{Logical whether log2 +1 is applied to counts first before
mean is applied, or applied after the mean is calculated.}

\item{big}{Logical, whether to invoke slicing of \code{x} into rows. This is
invoked automatically if \code{x} is a large matrix with >2^31 elements.}

\item{verbose}{Logical, whether to print messages.}

\item{sliceSize}{Integer, number of rows of \code{x} to use in each slice if
\code{big = TRUE}.}

\item{cores}{Integer, number of cores to use for parallelisation using
\code{mclapply()}. Parallelisation is not available on windows. Warning:
parallelisation has increased memory requirements.}
}
\value{
a matrix of mean log2 gene expression across cell types with genes
in rows and cell types in columns.
}
\description{
Workhorse function which takes as input a scRNA-Seq gene expression matrix
such as embedded in a Seurat object, calculates log2(counts +1) and averages
gene expression over a vector specifying cell subclasses or cell types. Very
large matrices are handled by slicing rows into blocks to avoid excess memory
requirements.
}
\details{
We find a significant speed up with \code{cores = 2}, which is almost twice as
fast as single core, but not much to be gained beyond this possibly due to
limits on memory traffic. The main speed up is in assigning the decompression
of a block from the sparse matrix to more than 1 core. Increasing \code{sliceSize}
also gives a speed up, but the limit on \code{sliceSize} is that the number of
elements manipulated in each block (i.e. \code{sliceSize} x number of cells in a
given subclass/group) must be kept below the long vector limit of 2^31
(around 2e9). Increasing \code{cores} and/or \code{sliceSize} requires substantial
amounts of spare RAM.
}
\seealso{
\code{\link[=scapply]{scapply()}} which is a more general version which can apply any
function to the matrix.
}
\author{
Myles Lewis
}
